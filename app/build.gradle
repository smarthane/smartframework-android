apply plugin: 'com.android.application'
apply plugin: 'com.didi.virtualapk.host'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'org.greenrobot.greendao'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.smarthane.android"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("../keystore/smarthane.key.jks")
            storePassword "111111"
            keyAlias "smarthane"
            keyPassword "111111"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        //输出apk名称为：渠道名_版本名_时间.apk
                        def fileName = "app-debug-${variant.productFlavors[0].name}-v${defaultConfig.versionName}-${System.currentTimeMillis()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        //输出apk名称为：渠道名_版本名_时间.apk
                        def fileName = "app-release-${variant.productFlavors[0].name}-v${defaultConfig.versionName}-${System.currentTimeMillis()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }
    greendao {
        schemaVersion 1
        daoPackage 'smarthane.greendao.dao'
        targetGenDir 'src/main/java'
    }
    //////////////////////////////////////////////////
    // 多渠道/多环境 的不同配置
    productFlavors {
        develop {
            // 每个环境包名不同
            applicationId "com.smarthane.android.develop"
        }
        product {
            applicationId "com.smarthane.android.product"
        }
    }
}
apt {
    arguments {
        moduleName project.getName()
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    apt rootProject.ext.dependencies["arouter-compiler"]
    apt rootProject.ext.dependencies["butterknife-compiler"]
    apt rootProject.ext.dependencies["dagger2-compiler"]
    provided rootProject.ext.dependencies["javax.annotation"]
    compile project(':lib-core')
}

//assembleRelease.doLast {
//    def dir_release = "${rootDir}/build/host/release"
//    File targetDir = new File(dir_release)
//    if(!targetDir.exists()) {
//        targetDir.mkdirs()
//    }
//    println("appRelease"+dir_release)
//    copy {
//        from("${projectDir}/build/outputs/apk")
//        into(dir_release)
//        include("app-release-*.apk")
//    }
//}
task appRelease(dependsOn: assembleRelease) {
    def dir_release = "${rootDir}/build/host/release"
    doFirst{
        delete dir_release
    }
    doLast{
        File targetDir = new File(dir_release)
        if(!targetDir.exists()) {
            targetDir.mkdirs()
        }
        copy {
            from("${projectDir}/build/outputs/apk")
            into(dir_release)
            include("app-release-*.apk")
        }
    }
}